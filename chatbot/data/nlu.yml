version: "2.0"

nlu:
- intent: availability
  examples: |
    - Es relevante que el sistema este disponible las 24 horas del día durante todo el año
    - El sistema debe estar disponible a la mayor cantidad de accesos.
    - El tiempo de actividad alcanzado por el sistema debe ser de un porcentaje alto.
    - El sistema debe fallar un porcentaje bajo de veces del tiempo que este disponible.
    - El sistema debe fallar una baja cantidad de veces del tiempo disponible en linea.
    - Los recursos del sistema deben estar disponible en cualquier momento del dia.
    - El sistema debe proporcionar un contacto de soporte todo el dia, cualquier dia de la semana.
    - El sistema ante alguna falla, debe dar un comunicado comprensible al usuario.
    - El sistema debe estar inactivo un tiempo relativamente corto por año.
    - El sistema debe estar disponible dentro de 24hs posteriores a una nueva instalacion o cambio de version.
    - El software del sistema debe poder funcionar sin reiniciar el sistema por completo frente a una falla.
    - Debe ser posible que se trate una falla de software del sistema independientemente. 
    - El hardware del sistema debe poder funcionar sin una perdida completa de servicio, excepto que falle la fuente de energia primaria y de respaldo.
    - El sistema debe responder sin perdidas a los cambios de procesamiento y entrada y salida.
    - Ante una inactividad el sistema debe volver a operar con un retraso minimo.
    - Ante una caida del sistema este debe recuperarse en el menos tiempo posible. 
    - El entorno de desarollo y mantenimiento debe estar disponible para una gran cantidad de desarrolladores el mayor tiempo posible laboral.

- intent: fault_tolerance
  examples: |
    - El producto funcionará en modo offline siempre que la conexión a Internet no esté disponible
    - El producto permitirá al usuario ver resultados de búsqueda descargados previamente.
    - El producto conservará las preferencias del usuario en caso de falla.
    - El sistema restaura las preferencias de usuario cuando el sistema vuelva a estar en línea.
    - El sitio web seguirá funcionando si el servidor de transmisión deja de funcionar.
    - El servidor de transmisión admitirá conexiones de transmisión simultáneas
    - El producto debe ser robusto con tolerancia a fallos.
    - El producto tendrá tolerancia a fallas mediante el uso de técnicas de recuperación, transacciones compensatorias y enrutamiento en caso de fallas.
    - Si un subsistema falla deben existir procedimientos predefinidos para redefinir el entorno de tal manera que la operación pueda reiniciarse. 
    - En caso de falla del hardware de la computadora en relación con el equipo de la estación de usuario, será posible transferir el control de una estación de usuario a otra mediante un sencillo procedimiento de reconfiguración del software.
    - El sistema debe permitir al usuario ver logs de errores previos.
    - El producto y sus bases de datos deben permanecer funcionando a pesar del ingreso de datos maliciosos.
    - El sitio web debe seguir operando si la pasarela de pago no funciona.
    - El producto debe evitar fallos estándar.

- intent: maintainability
  examples: |
    - Los componentes del sistema deben poder intercambiarse sin afectar el funcionamiento del programa.
    - El producto debe ser diseñado usando Patrones de Diseño y buenas prácticas de programación.
    - Debe ser altamente configurable para uso con varios sistemas de bases de datos para los usuarios finales.
    - El sistema debe continuar operando sin interrupciones durante las actualizaciones. 
    - Actualizaciones de mantenimiento deben ser oferecidas a los clientes una vez al año. Estas no deben tomar más de 5 minutos para ser instaladas.
    - Debe operar en cualquier plataforma. Debe ser adaptable para cualquier tecnología nueva sin hacer cambios en su arquitectura.
    - El sistema debe crear registros de todos los cambios, actualizaciones, o arreglos que se le realizan.
    - El sistema debe ser fácil de actualizar.
    - Las herramientas de software y aplicaciones pre-construidas que no tienen código fuente disponible deben venir con un completo diagnóstico y soporte al cliente.
    - El sistema debe estar diseñado en módulos donde los errores puedan ser detectados y corregidos fácilmente. Esto facilita instalar actualizaciones y nuevas funcionalidades si así se requiere.
    - El programa va a ser actualizado durante las horas de mantenimiento estipuladas.
    - El producto debe funcionar en cualquier navegador web.
    - Todos los cambios y actualizaciones al sistema deben ser actualizados en la documentación.
    - Se lanzarán nuevas versiones del sistema en períodos de tiempo cortos

- intent: performance
  examples: |
    - Es importante que el sistema traiga resultados de búsqueda en un tiempo aceptable
    - Es prioritario que el sistema realize la actualización del sitio rápido
    - El sistema actualizará la pantalla en cortos periodos de tiempo.
    - El producto responderá rápidamente para mantener los datos actualizados en la pantalla.
    - Se producirán resultados de búsqueda en un tiempo aceptable.
    - Los resultados de la búsqueda se devolverán en un tiempo aceptable, luego de que el usuario haya introducido los criterios de búsqueda.
    - Los miembros del personal deberán poder completar una serie de tareas de manera oportuna.
    - El tiempo máximo de espera para que un usuario navegue de una pantalla a otra no será demasiado largo.
    - El sistema permitirá que trabajen al mismo tiempo varios usuarios en simultáneo.
    - Se permitirá que los clientes existentes inicien sesión en el sitio web con su dirección de correo electrónico y contraseña en un corto periodo.
    - La interfaz del producto debe ser rápida.
    - El producto sondeará el sistema en busca de mensajes cada segundo. 
    - El sistema debe permitir un minimo de 6 usuarios para trabajar al mismo tiempo.
    - El tiempo de respuesta de la interfaz del producto debe ser rápida.
    - El producto debe proveer Multi-threading y Load Balancing.

- intent: scalability
  examples: |
    - El producto debe ser capaz de soportar 1000 usuarios simultáneos y remotos.
    - El producto debe ser capaz de administrar los 1000 usuarios existentes.
    - El sistema debe poder manejar todas los pedidos de usuarios durante horas laborales.
    - El producto deberá ser capaz de manejar gran cantidad de pedidos concurrentes.
    - Se espera que el producto opere por lo menos durante 5 años para cada instalación de cliente.
    - El lenguaje del producto se debe acomodar a todos los países de mercados objetivo. 
    - El server de streaming deberá soportar 50 conexiones de streaming simultáneas.
    - El sitio web deberá ser capaz de soportar 100.000 clientes.
    - El producto deberá procesar un minimo de un millón de transacciones por año.
    - El lapso de tiempo requerido para producir cualquier reporte mostrando información de las transacciones deberá estar basado en cuanta información se presenta  antes que en el total de información almacenada.
    - El esfuerzo necesario para administrar el sistema de pago (medido en horas por mes del administrador del sistema) no deberiá incrementar con el incremento del número de empleados.
    - El sistema de pago deberá ser escalable para soportar el crecimiento ilimitado del número de empleados.
    - El repositorio de reglas de negocio debera escalar para manejar un número ilimitado de reglas adicionales.
    - El sistema de afirmaciones debera soportar todos los cambios surgidos de cualquier eveto catastrófico.
    - El sistema de manejo de cuentas debera soportar un número ilimitado de clientes, cuentas y transacciones.
    - El sistema debe ser escalable y no debe tener ninguna característica que pudiese perjudicar el uso en cualquier estación, aunque cambie el número de casos manejado.
   
- intent: security
  examples: |
    - Es importante que el sistema traiga autorización de usuarios y almacenamiento seguro de contraseñas
    - Es prioritario que el sistema proteja la integridad de la información del usuario
    - Garantizar que solo los usuarios autorizados puedan acceder al sistema.
    - El producto podrá distinguir entre usuarios autorizados y no autorizados en todos los intentos de acceso.
    - Todo usuario del sistema deberá estar autenticado y autorizado.
    - Verificación básica de la integridad de los datos para reducir la posibilidad de que se introduzcan datos incorrectos o no válidos.
    - Todas las adiciones de nuevos usuarios y las modificaciones al acceso de los usuarios se registrarán en un Informe.
    - Solo se ingresarán datos válidos en el sistema. 
    - No se introducirán datos inválidos en el sistema.
    - El producto estará libre de virus informáticos.
    - Se evitará ataques maliciosos, incluida la denegación de servicio.
    - Garantizar que los datos de la base de datos se correspondan con los datos introducidos por el usuario.
    - Los accesos de usuario deben ser limitados según sus rol.
    - Sólo usuarios autorizados deben tener acceso a información crítica del sistema.
    - El sistema debe proteger la información privada de acuerdo con las políticas de la organización.
    
- intent: usability
  examples: |
    - Es importante que el sistema sea intuitivo y de fácil comprensión
    - Es prioritario que el sistema pueda ser usado con facilidad
    - El sistema será intuitivo y autoexplicativo.
    - El producto debe ser fácil de aprender para un agente sin conocimiento.
    - Instalación realizable por un agente no capacitado sin recurrir a instrucciones impresas por separado.
    - Fácil uso, tanto por los administradores del programa, como por miembros del personal.
    - Los usuarios se sentirán satisfechos usando el producto.
    - Las personas sin formación y sin conocimientos de inglés podrán utilizar el producto.
    - Todos los mensajes de error producidos por el sistema deben ser significativos, de modo que los usuarios que probablemente los vean puedan actuar en consecuencia.
    - Se deberá poder mostrar varias entidades (casos, sospechosos) simultáneamente.
    - La navegación debe diseñarse para ayudar a los usuarios a comprender dónde se encuentran, dónde han estado y adónde pueden ir a continuación.
    - Se deberán proporcionar funciones de usuario final y administrador que sean fáciles de usar e intuitivas en todo momento.
    - La interfaz debe mostrar datos entendibles.
    - El producto debe ser intuitivo y fácil para el usuario
    - El usuario debe poder ubicar fácilmente instrucciones para el manejo del producto.

- intent: see_vector
  examples: |
    - Mostrame los resultados
    - Quiero ver los resultados
    - Quiero ver el resultado